import tkinter as tk
from tkinter import *
from PIL import ImageTk, Image
import cv2
import random
import screeninfo
from time import sleep

# Get the primary monitor's size
primary_monitor = screeninfo.get_monitors()[0]
screen_width = primary_monitor.width
screen_height = primary_monitor.height

# Create a Tkinter window
window = tk.Tk()
window.title("Spyro")
canvas = tk.Canvas(window, width=screen_width, height=screen_height)
window.attributes('-fullscreen', True)  

roboState = 1

def play_face(numFace):
    video_path = f"roboFace{numFace}.mp4"  # Replace with the path to your video file
    cap = cv2.VideoCapture(video_path)
    
    # Get the video's dimensions
    width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
 
    # Create a canvas to display the video frames
    canvas.pack()
    
    while True:
        # Create a Tkinter window
        
        ret, frame = cap.read()
        
        if not ret:
            break
        
        # Convert the OpenCV frame to a PIL Image
        image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        image = Image.fromarray(image)
        
        # Resize the image to match the video's dimensions
        image = image.resize((width, height))
        
        # Convert the PIL Image to a Tkinter-compatible image
        img = ImageTk.PhotoImage(image)
        
        # Update the canvas with the new frame
        canvas.create_image(0, 0, anchor=tk.NW, image=img)
        window.update()
        
    # Release the video capture and destroy the Tkinter window
    cap.release()
    print(f"The robot did face {roboState}")
    

while True:
    
    play_face(roboState)
        
    roboState = random.randint(1, 8)
    sleep(2)
